# -*- coding: utf-8 -*-
"""rainfall predict.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VxB6gPH7jWaph59DHYgjQDCthnCdwwYV
"""

!pip install streamlit 

import streamlit as st
import requests
from datetime import datetime
import pickle

# Streamlit page config
st.set_page_config(page_title="Live Rain Forecast ☔", layout="centered")

# Function to set light mode background
def set_background():
    st.markdown("""
        <style>
            body {
                background-color: #f0f2f6; /* Light gray background */
                color: black;
            }
            .main {
                background-color: rgba(255, 255, 255, 0.95); /* Slightly transparent white */
                color: black;
                padding: 2rem;
                border-radius: 10px;
            }
            h1, h2, h3 {
                color: #004466; /* Dark blue */
                text-align: center;
            }
        </style>
    """, unsafe_allow_html=True)


def set_dark_mode():
    st.markdown("""
        <style>
            body {
                background-color: #1e1e1e;
                color: white;
            }
            .main {
                background-color: rgba(30, 30, 30, 0.95);
                color: white;
                padding: 2rem;
                border-radius: 10px;
            }
            h1, h2, h3 {
                color: #ffcc00;
                text-align: center;
            }
        </style>
    """, unsafe_allow_html=True)

# Theme selection
theme = st.radio("Choose Theme 🌈", ["☀️ Light", "🌙 Dark"])
set_background() if theme == "☀️ Light" else set_dark_mode()

# Weather app content
with st.container():
    st.markdown("<div class='main'>", unsafe_allow_html=True)
    st.markdown("## ⛅ **Live Weather & Rain Forecast** ☔")

    API_KEY = "0a4819b28a82fa77e5437c6c156837d4" # Replace with your actual API key
    city = st.text_input("📍 Enter your city:", "Chennai")

    if st.button("🔍 Check Weather Now"):
        url = f"https://api.openweathermap.org/data/2.5/weather?q={city}&appid={API_KEY}&units=metric"
        response = requests.get(url)

        if response.status_code == 200:
            data = response.json()
            temp = data["main"]["temp"]
            humidity = data["main"]["humidity"]
            wind = data["wind"]["speed"]
            weather = data["weather"][0]["description"]
            dt = datetime.fromtimestamp(data["dt"]).strftime("%A, %d %b %Y %I:%M %p")
            rain_pred = "🌧️ Rain Expected" if "rain" in weather.lower() else "🌤️ No Rain"

            # Display weather info
            st.markdown(f"### 📅 **{dt}**")
            st.markdown(f"### 🌡️ Temperature: **{temp} °C**")
            st.markdown(f"### 💧 Humidity: **{humidity}%**")
            st.markdown(f"### 🌬️ Wind Speed: **{wind} m/s**")
            st.markdown(f"### 🌀 Condition: **{weather.title()}**")
            st.markdown(f"## ⏱️ Prediction Now: **{rain_pred}**")

            # Create voice output
            tts_text = f"In {city}, it is {temp} degrees Celsius with {weather}. {'Rain expected' if 'rain' in weather.lower() else 'No rain expected'}."

            # Audio icon for TTS
            st.markdown("### 🔊 Click below to hear it:")
            st.components.v1.html(f"""
                <script>
                    function speak() {{
                        var msg = new SpeechSynthesisUtterance("{tts_text}");
                        msg.pitch = 1;
                        msg.rate = 1;
                        msg.volume = 1;
                        window.speechSynthesis.cancel();  // stop previous
                        window.speechSynthesis.speak(msg);
                    }}
                </script>
                <div style="text-align:center;">
                    <button onclick="speak()" style="
                        font-size: 30px;
                        background-color: #004466;
                        color: white;
                        border: none;
                        padding: 10px 20px;
                        border-radius: 10px;
                        cursor: pointer;">
                        🔊 Speak Forecast
                    </button>
                </div>
            """, height=100)
        else:
            st.error("❌ Could not fetch weather. Please check city name or API key.")
    st.markdown("</div>", unsafe_allow_html=True)

# Ensure LR is defined or loaded before attempting to pickle it
# For example, you might train a model and assign it to LR:
# from sklearn.linear_model import LogisticRegression
# LR = LogisticRegression()
# LR.fit(X_train, y_train)

# Make sure to provide a valid filename for the pickle file
# For example, 'model.pkl'
try:
    # This block is outside the Streamlit container, it will execute when the script runs
    with open('model.pkl','wb') as f: # Changed filename to 'model.pkl' and corrected indentation
        pickle.dump(LR,f) # Corrected indentation
    print("model saved successfully") # Corrected indentation and message
except NameError:
    print("Error: 'LR' variable is not defined. Please define or load your model before pickling.")
except Exception as e:
    print(f"An error occurred during pickling: {e}")
